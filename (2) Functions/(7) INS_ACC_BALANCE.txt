
create or replace FUNCTION          "INS_ACC_BALANCE" (p_org_id number,P_TRAN_ID NUMBER 
                ,P_TRANS_CODE NUMBER,P_parent_CODE NUMBER 
                ,P_damount NUMBER,P_camount NUMBER, p_pk_id number 
            ) RETURN VARCHAR2 
  IS 
  V_return VARCHAR2(20) := 'SUCCESS'; 
  v_parent_code number; 
 v_project_code number; 
  V_TDATE   DATE; 
  BEGIN 
  SELECT TDATE,project_code INTO V_TDATE,v_project_code FROM TMP_TRAN_M WHERE TRAN_ID = P_TRAN_ID; 
	begin 
		select P_CODE into v_parent_code from g_acc_codes  
		where org_id = p_org_id and code = P_parent_CODE;  
        IF  v_parent_code = 0 THEN v_parent_code := NULL; END IF; 
	exception when no_data_found then v_parent_code:= null; end; 
	htp.p('v_parent_code:'||v_parent_code); 
	if v_parent_code is not null then  
		V_return := ins_acc_balance(p_org_id,P_TRAN_ID,P_TRANS_CODE,v_parent_code,P_damount,P_camount,p_pk_id); --function call is ok with v_parent 
	end if; 
	 
	insert into acc_balance (acc_balance_ID,ORG_ID,TRAN_DATE,DR_AMOUNT,CR_AMOUNT,TRAN_ID,TRANS_CODE,acc_pk_id,project_code) 
	VALUES(acc_bal_seq.nextval,p_org_id,V_TDATE,P_damount,P_camount,P_TRAN_ID,P_parent_CODE,p_pk_id,v_project_code); 
     
    /*select acc_bal_seq.nextval,d.org_id,m.TDATE,d.damount,d.camount,d.TRAN_ID,P_parent_CODE 
	from tmp_tran_d D, TMP_TRAN_M M 
	WHERE D.TRAN_ID = M.TRAN_ID 
	and d.TRANS_CODE = P_TRANS_CODE 
    AND D.TRAN_ID = P_TRAN_ID; 
	*/ 
    RETURN V_return; 
	 
  END; 
/

